// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

generator zod {
    provider = "prisma-zod-generator"
}

datasource db {
    provider = "mongodb"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

//Notes:
//Any field (most commonly IDs and relation scalar fields) that maps to an ObjectId in the underlying database:
// Must be of type String or Bytes
// Must include the @db.ObjectId attribute
// Can optionally use @default(auto()) to auto-generate a valid ObjectId on document creation

//Relation fields' type is another model
//Relation fields do not exist in the database
//fields referenced in @relation(fields: []) do exist in the database

model Job {
    id                            String           @id @default(auto()) @map("_id") @db.ObjectId
    title                         String
    description                   String
    howToApply                    String
    employer                      Employer         @relation(fields: [employerId], references: [id])
    employerId                    String           @db.ObjectId
    employmentType                EmploymentType[]
    applicantLocationRequirements Country          @default(Worldwide)
    validThrough                  DateTime?
    category                      Category
    directApply                   Boolean
    applyUrl                      String?
    applyEmail                    String?
    imageUrl                      String?
    tags                          Tag[]            @relation(fields: [tagIds], references: [id])
    tagIds                        String[]         @db.ObjectId
    datePosted                    DateTime         @default(now())
    updatedAt                     DateTime         @updatedAt
    savedBy                       JobSeeker[]      @relation("SavedByJobseeker", fields: [savedByIds], references: [id])
    savedByIds                    String[]         @db.ObjectId
    applicants                    JobSeeker[]      @relation("AppliedByJobseeker", fields: [applicantIds], references: [id])
    applicantIds                  String[]         @db.ObjectId
    priority                      Int              @db.Int //higher takes precedence
    highlight                     String?
}

type BaseSalary {
    currency String
    value    Float
    unitType SalaryUnitType
    maxValue Float?
}

enum SalaryUnitType {
    HOUR
    MONTH
    ANNUAL
}

//Based on employmentType in google structured data for job postings
enum EmploymentType {
    FULL_TIME
    PART_TIME
    CONTRACTOR
    TEMPORARY
    OTHER
}

model JobSeeker {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    firstName  String
    lastName   String
    email      String   @unique
    savedJobs  Job[]    @relation("SavedByJobseeker", fields: [savedIds], references: [id])
    savedIds   String[] @db.ObjectId
    applied    Job[]    @relation("AppliedByJobseeker", fields: [appliedIds], references: [id])
    appliedIds String[] @db.ObjectId

    @@unique([firstName, lastName])
}

model Employer {
    id   String       @id @default(auto()) @map("_id") @db.ObjectId
    name String       @unique
    jobs Job[]
    logo String?
    url  String
    type EmployerType @default(COMPANY)
}

enum EmployerType {
    SINGLE
    COMPANY
}

model Tag {
    id     String   @id @default(auto()) @map("_id") @db.ObjectId
    name   String   @unique
    jobs   Job[]    @relation(fields: [jobIds], references: [id])
    jobIds String[] @db.ObjectId
}

enum Category {
    Programming
    VA
    Marketing
    Design
    Writing
    Teaching
    NonTech
}

enum Country {
    Worldwide
    Afghanistan
    AlandIslands
    Albania
    Algeria
    AmericanSamoa
    Andorra
    Angola
    Anguilla
    Antarctica
    AntiguaAndBarbuda
    Argentina
    Armenia
    Aruba
    Australia
    Austria
    Azerbaijan
    Bahamas
    Bahrain
    Bangladesh
    Barbados
    Belarus
    Belgium
    Belize
    Benin
    Bermuda
    Bhutan
    Bolivia
    BonaireSintEustatiusSaba
    BosniaAndHerzegovina
    Botswana
    BouvetIsland
    Brazil
    BritishIndianOceanTerritory
    BruneiDarussalam
    Bulgaria
    BurkinaFaso
    Burundi
    Cambodia
    Cameroon
    Canada
    CapeVerde
    CaymanIslands
    CentralAfricanRepublic
    Chad
    Chile
    China
    ChristmasIsland
    CocosKeelingIslands
    Colombia
    Comoros
    Congo
    CongoDemocraticRepublic
    CookIslands
    CostaRica
    CoteDIvoire
    Croatia
    Cuba
    Curacao
    Cyprus
    CzechRepublic
    Denmark
    Djibouti
    Dominica
    DominicanRepublic
    Ecuador
    Egypt
    ElSalvador
    EquatorialGuinea
    Eritrea
    Estonia
    Ethiopia
    FalklandIslands
    FaroeIslands
    Fiji
    Finland
    France
    FrenchGuiana
    FrenchPolynesia
    FrenchSouthernTerritories
    Gabon
    Gambia
    Georgia
    Germany
    Ghana
    Gibraltar
    Greece
    Greenland
    Grenada
    Guadeloupe
    Guam
    Guatemala
    Guernsey
    Guinea
    GuineaBissau
    Guyana
    Haiti
    HeardIslandMcdonaldIslands
    HolySeeVaticanCityState
    Honduras
    HongKong
    Hungary
    Iceland
    India
    Indonesia
    Iran
    Iraq
    Ireland
    IsleOfMan
    Israel
    Italy
    Jamaica
    Japan
    Jersey
    Jordan
    Kazakhstan
    Kenya
    Kiribati
    Korea
    KoreaDemocraticPeoplesRepublic
    Kuwait
    Kyrgyzstan
    LaoPeoplesDemocraticRepublic
    Latvia
    Lebanon
    Lesotho
    Liberia
    LibyanArabJamahiriya
    Liechtenstein
    Lithuania
    Luxembourg
    Macao
    Macedonia
    Madagascar
    Malawi
    Malaysia
    Maldives
    Mali
    Malta
    MarshallIslands
    Martinique
    Mauritania
    Mauritius
    Mayotte
    Mexico
    Micronesia
    Moldova
    Monaco
    Mongolia
    Montenegro
    Montserrat
    Morocco
    Mozambique
    Myanmar
    Namibia
    Nauru
    Nepal
    Netherlands
    NewCaledonia
    NewZealand
    Nicaragua
    Niger
    Nigeria
    Niue
    NorfolkIsland
    NorthernMarianaIslands
    Norway
    Oman
    Pakistan
    Palau
    PalestinianTerritory
    Panama
    PapuaNewGuinea
    Paraguay
    Peru
    Philippines
    Pitcairn
    Poland
    Portugal
    PuertoRico
    Qatar
    Reunion
    Romania
    RussianFederation
    Rwanda
    SaintBarthelemy
    SaintHelena
    SaintKittsAndNevis
    SaintLucia
    SaintMartin
    SaintPierreAndMiquelon
    SaintVincentAndGrenadines
    Samoa
    SanMarino
    SaoTomeAndPrincipe
    SaudiArabia
    Senegal
    Serbia
    Seychelles
    SierraLeone
    Singapore
    SintMaarten
    Slovakia
    Slovenia
    SolomonIslands
    Somalia
    SouthAfrica
    SouthGeorgiaAndSandwichIsl
    SouthSudan
    Spain
    SriLanka
    Sudan
    Suriname
    SvalbardAndJanMayen
    Swaziland
    Sweden
    Switzerland
    SyrianArabRepublic
    Taiwan
    Tajikistan
    Tanzania
    Thailand
    TimorLeste
    Togo
    Tokelau
    Tonga
    TrinidadAndTobago
    Tunisia
    Turkey
    Turkmenistan
    TurksAndCaicosIslands
    Tuvalu
    Uganda
    Ukraine
    UnitedArabEmirates
    UnitedKingdom
    UnitedStates
    UnitedStatesOutlyingIslands
    Uruguay
    Uzbekistan
    Vanuatu
    Venezuela
    Vietnam
    VirginIslandsBritish
    VirginIslandsUS
    WallisAndFutuna
    WesternSahara
    Yemen
    Zambia
    Zimbabwe
}

// Necessary for Next auth
model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String  @db.ObjectId
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    userId       String   @db.ObjectId
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(auto()) @map("_id") @db.ObjectId
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
}

model VerificationToken {
    identifier String   @id @default(auto()) @map("_id") @db.ObjectId
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
